/* CS 1501 Project 1 by Kevin Good
part 1: make a DLB and populate it with the words in dictionary.txt
DLB- Tree made up of layers of linked lists (see slides)
  each node is a letter that points to both the next letter in word(s)
  and an alternative letter that can be used
  each word should end with a terminator character (which could also
  point to another letter to make a longer word)

part 2: implement rudimentary autocomplete for words
  accept a single letter  AT A TIME for input and generate a list of
  5 words to autocomplete that start with the proper letters.
  if the user enters the terminator character they are looking for a
  specific word.
  they can then enter a number to select a word.
  ! should be used to exit the program and output average time to complete
  should be case sensitive.

  must keep track of the user's history and should be generated by the
  program. (DO NOT INCLUDE IN BOX)
  must justify data structure used in txt file.
  if input matches a word in history, results for that word should
  take priority.
*/
import java.io.*;
import java.util.Scanner;
import java.util.ArrayList;

public class ac_test{

  public static void main(String[] args){
    dlb DLB = new dlb();
    ArrayList<String> history = new ArrayList<String>();
    try{
      File f = new File("dictionary.txt");
      File hist = new File("user_history.txt");
      boolean check = hist.createNewFile();
      if (!check){
        //String[] history = hist.readLines();
        //populate data structure for user history
        Scanner input = new Scanner(hist);
        while (input.hasNextLine()){
          String s = input.nextLine();
          s.replace("\n", "");
          if (!history.contains(s)){
            history.add(s);
          }
        }
      }
      Scanner input = new Scanner(f);
      while (input.hasNextLine()){
        String s = input.nextLine();
        s = s.replace("\n", "");
        DLB.add(s);
      }
    }catch (IOException fnfe){
      fnfe.printStackTrace();
      System.out.println("Error: file not found");
      System.exit(1);
    }
    String input = "0";
    String word = "";
    String[] output = new String[5];
    int numWords = 0;
    while (!input.equals("!")){
      System.out.print("Enter a character: ");
      Scanner s = new Scanner(System.in);
      char c = s.next().charAt(0);
      input = Character.toString(c);
      if (Character.isDigit(c)){
        int i = Integer.parseInt(input);
        i--;
        System.out.println("Word Completed: " + output[i]);
        if (!history.contains(output[i])){
          System.out.println("HIstory added: " + output[i]);
          history.add(output[i]);
        }
        word = "";
        output = new String[5];
      }else if (input.equals("$")){
        System.out.println("Word Completed: " + word);
        if (!history.contains(word)){
          history.add(word);
        }
        word = "";
        output = new String[5];
      }else if (!input.equals("!")){
        long before = System.nanoTime();
        word += input;
        for (int i = 0; i < history.size(); i++){
          String auto = history.get(i);
          System.out.print(word + " auto: " + auto + "\n");
          if (auto.startsWith(word) && numWords < 5){
            System.out.println("added: " + auto);
            output[numWords] = auto;
            System.out.println(output[numWords]);
            numWords++;
          }
        }
        output = DLB.predict(output, word, numWords);
        long after = System.nanoTime();
        after -= before;
        double d = after / 1000000000;
        System.out.println("\nTime to completion: " + after);
        System.out.println("Predictions: ");
        for (int i = 0; i < 5; i++){
          if (output[i] != null){
            System.out.println((i + 1) + ": " + output[i]);
          }
        }
        numWords = 0;
      }
      //System.out.println(word);
    }
    try{
      File f = new File("user_history.txt");
      PrintWriter p = new PrintWriter(f);
      for (int i = 0; i < history.size(); i++){
        p.println(history.get(i));
      }
      p.close();
    }catch (FileNotFoundException fnfe){
      fnfe.printStackTrace();
      System.out.println("Error: file not found");
      System.exit(1);
    }
    //add words for user history to file
  }
}
