/* CS 1501 Project 1 by Kevin Good
part 1: make a DLB and populate it with the words in dictionary.txt
DLB- Tree made up of layers of linked lists (see slides)
  each node is a letter that points to both the next letter in word(s)
  and an alternative letter that can be used
  each word should end with a terminator character (which could also
  point to another letter to make a longer word)

part 2: implement rudimentary autocomplete for words
  accept a single letter  AT A TIME for input and generate a list of
  5 words to autocomplete that start with the proper letters.
  if the user enters the terminator character they are looking for a
  specific word.
  they can then enter a number to select a word.
  ! should be used to exit the program and output average time to complete
  should be case sensitive.

  must keep track of the user's history and should be generated by the
  program. (DO NOT INCLUDE IN BOX)
  must justify data structure used in txt file.
  if input matches a word in history, results for that word should
  take priority.
*/
import java.io.*;
import java.util.Scanner;

public class ac_test{

  public static void main(String[] args){
    dlb DLB = new dlb();
    try{
      File f = new File("dictionary.txt");
      Scanner input = new Scanner(f);

      while (input.hasNextLine()){
        String s = input.nextLine();
        s = s.replace("\n", "");
        DLB.add(s);
      }
      //System.out.println(DLB.contains("box"));
      //System.out.println(DLB.contains("knife"));
    }catch (FileNotFoundException fnfe){
      fnfe.printStackTrace();
      System.out.println("Error: file not found");
      System.exit(1);
    }
    char input = '0';
    String word = "";
    String[] output;
    while (input != '!'){
      System.out.print("Enter a character: ");
      Scanner s = new Scanner(System.in);
      input = s.next().charAt(0);
      if (input.isDigit()){
        word = output[(int)input];
        System.out.println("Word Completed: " + word);
        word = "";
        output = new String[5];
      }else if (input != '!'){
        word += input;
        output = DLB.predict(word);
        for (int i = 0; i < 5; i++){
          System.out.println((i + 1) + ": " + output[i]);
        }
      }

      //System.out.println(word);
    }
  }
}
